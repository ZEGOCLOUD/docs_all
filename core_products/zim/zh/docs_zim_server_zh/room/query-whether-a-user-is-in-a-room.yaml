openapi: 3.0.0
info:
  title: open-api-desc
  version: 1.0.0
  contact:
    name: ZEGO Support
    email: support@zegocloud.com

servers:
  $ref: '../shared-components.yaml#/servers'

tags:
  - room

paths:
  /:
    get:
      tags: [room]
      summary: 查询用户是否在房间内
      description: |
        查询用户是否在指定房间内。默认支持批量查询至多 10 名用户，如需调整，请联系 ZEGO 技术支持。

        <Note title="说明">调用频率限制：5 次/秒，房间级别限制。</Note>
      operationId: query-whether-a-user-is-in-a-room
      parameters:
        - name: Action
          in: query
          description: |
            > 接口原型参数
            >
            > https://zim-api.zego.im/?Action=QueryRoomMembers
          required: true
          schema:
            type: string
            enum: [QueryRoomMembers]
          style: form
          explode: true
        - $ref: '../shared-components.yaml#/components/parameters/AppId'
        - $ref: '../shared-components.yaml#/components/parameters/SignatureNonce'
        - $ref: '../shared-components.yaml#/components/parameters/Timestamp'
        - $ref: '../shared-components.yaml#/components/parameters/SignatureVersion'
        - $ref: '../shared-components.yaml#/components/parameters/Signature'
        - name: UserId
          in: query
          required: true
          description: |
            需要查询的用户 ID 列表，默认最多可查询 10 个用户 ID。

            >**说明**
            >
            >UserId 长度上限为 32 字节，RoomID 长度上限为 128 字节，均仅支持数字，英文字符和 '!'，'#'，'$'，'%'，'&'，'('，')'，'+'，'-'，':'，';'，'<'，'='，'.'，'>'，'?'，'@'，'['，']'，'^'，'_'，' '，'{'，'}'，'|'，'~'。

            示例：UserId[]=a&UserId[]=b&UserId[]=c&UserId[]=d
          schema:
            type: array
            maxItems: 10
            items:
              type: string
              maxLength: 32
              example: "user1"
          style: form
          explode: true
        - name: RoomId
          in: query
          required: true
          description: 房间 ID。
          schema:
            type: string
            maxLength: 32
            example: "room123"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRoomMembersResponse'
              example: 
                Code: 0
                Message: success
                RequestId: "343649807833778782"
                UserList:
                  - user_id: "a"
                    user_name: "UserNamea"
                    avatar: "https://www.xxx.com/avatarA.png"
                    extra: "Extraa"
                  - user_id: "b"
                    user_name: "UserNameb"
                    avatar: "https://www.xxx.com/avatarB.png"
                    extra: "Extrab"
                ErrorList:
                  - UserId: "c"
                    SubCode: 660300012
                  - UserId: "d"
                    SubCode: 660200001


components:
  schemas:
    QueryRoomMembersResponse:
      type: object
      properties:
        Code:
          type: integer
          description: |
            返回码。

            以下仅列出了接口业务逻辑相关的返回码，完整返回码请参考 [全局返回码](/zim-server/return-codes)。
            <table>
            <thead><tr><th>返回码</th><th>说明</th><th>处理建议</th></tr></thead>
            <tbody>
            <tr><td>660000002</td><td>参数错误</td><td>请检查输入的参数</td></tr>
            <tr><td>660000011</td><td>用户个数超过限制。</td><td>请检查输入的用户列表。</td></tr>
            <tr><td>660200001</td><td>用户未注册</td><td>请确认用户 ID 是否存在或用户是否已登出 ZIM 服务。</td></tr>
            <tr><td>660300006</td><td>调用接口频率超出限制。</td><td>请稍后再试。</td></tr>
            <tr><td>660300012</td><td>用户不在房间内</td><td>无需处理。</td></tr>
            </tbody>
            </table>
          example: 0
        Message:
          type: string
          description: 请求结果的说明信息。
          example: "success"
        RequestId:
          type: string
          description: 请求 ID。
          example: "343649807833778782"
        UserList:
          type: array
          description: 查询结果，即在指定房间的用户列表。
          items:
            type: object
            properties:
              user_id:
                type: string
                description: 在指定房间的用户的 ID。
                example: "a"
              user_name:
                type: string
                description: 	在指定房间的用户的名称。
                example: "UserNamea"
              avatar:
                type: string
                description: 用户头像信息，可为 null。
                nullable: true
                example: "https://www.xxx.com/avatarA.png"
              extra:
                type: string
                description: 扩展信息，可为 null。
                nullable: true
                example: "Extraa"
        ErrorList:
          type: array
          description: |
            不在指定房间的用户列表。
                <ul>
                <li>Code 为 0：</li>
                <li> ErrorList 为空，全部用户都在指定房间。</li>
                <li> ErrorList 不为空，表示部分用户不在指定房间，请参考 SubCode 处理。</li>
                </ul>
                <ul>
                <li>Code 不为 0：</li>
                <li>ErrorList 为空，表示参数错误、接口频率限制、系统错误。</li>
                <li>ErrorList 不为空，表示全部用户都不在指定房间。</li>
                </ul>
          items:
            type: object
            properties:
              UserId:
                type: string
                description: 不在指定房间的用户的 ID。
                example: "c"
              SubCode:
                type: number
                description: 不在指定房间原因的返回码。
                example: 660300012