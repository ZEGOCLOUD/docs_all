openapi: 3.0.0
info:
  title: open-api-desc
  version: 1.0.0
  contact:
    name: ZEGO Support
    email: support@zegocloud.com
servers:
  $ref: '../shared-components.yaml#/servers'
tags:
  - user
paths:
  /:
    post:
      tags: [user]
      summary: 批量注册用户
      description: |
        后端注册，开发者可以通过该接口批量帮用户注册 IM 账号，实现消息的接收，以便在用户登录 ZIM 后接收历史消息，常用于教育场景。

        <Note title="说明">调用频率限制：20 次/秒。</Note>
      operationId: batch-register-users
      parameters:
        - name: Action
          in: query
          description: |
            > 接口原型参数
            >
            > https://zim-api.zego.im/?Action=UserRegister
          required: true
          schema:
            type: string
            enum: [UserRegister]
          style: form
          explode: true
        - $ref: '../shared-components.yaml#/components/parameters/AppId'
        - $ref: '../shared-components.yaml#/components/parameters/SignatureNonce'
        - $ref: '../shared-components.yaml#/components/parameters/Timestamp'
        - $ref: '../shared-components.yaml#/components/parameters/SignatureVersion'
        - $ref: '../shared-components.yaml#/components/parameters/Signature'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
            example:
              UserInfo:
                - UserId: "aaa"
                  UserName: "userNamea"
                  UserAvatar: "http"
                - UserId: "bbb"
                  UserName: "userNameb"
                  UserAvatar: "http"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
components:
  schemas:
    UserRegisterRequest:
      type: object
      required: [UserInfo]
      properties:
        UserInfo:
          type: array
          description: 用户信息，单次最多注册 100 个用户。
          maxItems: 100
          items:
            type: object
            required: [UserId]
            properties:
              UserId:
                type: string
                description: |
                  用户 ID，长度不超过 32 字节。

                  >**说明**
                  >
                  > UserIds 仅支持数字，英文字符和 '!'，'#'，'$'，'%'，'&'，'('，')'，'+'，'-'，':'，';'，'<'，'='，'.'，'>'，'?'，'@'，'['，']'，'^'，'_'，' '，'{'，'}'，'|'，'~'。
                maxLength: 32
                example: "aaa"
              UserName:
                type: string
                description: 用户名称，长度不超过 256 字节。
                maxLength: 256
                example: "userNamea"
              UserAvatar:
                type: string
                description: 用户头像地址，长度不超过 500 字节。
                maxLength: 500
                example: "http"
    UserRegisterResponse:
      type: object
      properties:
        Code:
          type: integer
          description: |
            返回码。

            以下仅列出了接口业务逻辑相关的返回码，完整返回码请参考 [全局返回码](/zim-server/return-codes)。
            > **说明**
            >
            > 当您发起请求同时注册多个用户时：
            > <ul><li>如果有 1 个或以上的用户 ID 注册成功，Code 都会返回 0。此时请参考 ErrorList 中的具体信息，确认操作结果。</li>
            > <li>如果全部用户注册失败，Code 会返回相关返回码，具体请参考 <a href="/zim-server/return-codes" target="_blank">全局返回码</a>。</li></ul>

            <table>
            <tbody><tr>
            <th>返回码</th>
            <th>描述</th>
            <th>可能原因</th>
            <th>处理建议</th>
            </tr>
            <tr>
            <td>660000001</td>
            <td>业务类通用错误。</td>
            <td>服务端出错。</td>
            <td>请重试，或联系 ZEGO 技术支持。</td>
            </tr>
            <tr>
            <td>660000002</td>
            <td>输入参数错误。</td>
            <td>输入的参数缺失或不合法。</td>
            <td>请检查输入的参数。</td>
            </tr>
            <tr>
            <td>660000012</td>
            <td>UserID 长度超过限制。</td>
            <td>UserID 最大长度为 32 字节。</td>
            <td>请确认 UserID 的长度。</td>
            </tr>
            <tr>
            <td>660700001</td>
            <td>请求过于频繁。</td>
            <td>发起请求频率超过 20 次/秒。</td>
            <td>请稍后再试。</td>
            </tr>
            <tr>
            <td>660700002</td>
            <td>用户已存在。</td>
            <td>发送请求的 UserID 已存在。</td>
            <td>请避免重复注册相同的 UserID。</td>
            </tr>
            <tr>
            <td>660700006</td>
            <td>UserName 长度超过限制。</td>
            <td>UserName 长度最大为 256 字节。</td>
            <td>请确认 UserName 的长度。</td>
            </tr>
            <tr>
            <td>660700007</td>
            <td>UserAvatar 地址长度超过限制。</td>
            <td>UserAvatar 地址长度最大为 500 字节。</td>
            <td>请确认 UserAvatar 的长度。</td>
            </tr>
            </tbody></table>
          example: 0
        Message:
          type: string
          description: 请求结果的说明信息。
          example: "success"
        RequestId:
          type: string
          description: 请求 ID。
          example: "343649807833778782"
        ErrorList:
          type: array
          description: |
            失败信息列表。
            <ul>
            <li>Code 为 0：</li>
            <li>  ErrorList 为空，全部用户注册成功。</li>
            <li>  ErrorList 不为空，表示部分用户注册失败，请参考 SubCode、SubMessage 处理。</li>
            <li>Code 不为 0：</li>
            <li>  ErrorList 为空，表示参数错误、接口频率限制、系统错误。</li>
            <li>  ErrorList 不为空，表示所有用户都注册失败，全部都是已经存在的用户。</li>
            </ul>
          items:
            type: object
            properties:
              UserId:
                type: string
                description: 注册失败的 UserID。
                example: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
              SubCode:
                type: number
                description: 用户注册失败的具体返回码。
                example: 660000012
              SubMessage:
                type: string
                description: 用户注册失败的原因说明。
                example: "user length limit"
